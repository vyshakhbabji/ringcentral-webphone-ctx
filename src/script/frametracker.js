Object.defineProperty(exports,"__esModule",{value:!0});
var logger_1=require("./logger"),hdxms_1=require("./hdxms"),FrameTracker=function(){function e(){var a=this;this.running_=!1;this.elements_=[];this.clipRects=new Set;var b=hdxms_1.getRedirector();Promise.all([(0,window.getWindowHandleAsHex)(),b.startRedirection(!1,"FrameTracker.ctor")]).then(function(a){logger_1.logger.log("FrameTracker: set window handle: "+a[0]);b.WSSendObject({v:"overlay",command:"window",windowHandle:a[0]})});this.observer_=new MutationObserver(function(b){a.updateAll()})}e.prototype.rectanglesIntersect=
function(a,b){return a.x<b.x+b.width&&a.x+a.width>b.x&&a.y<b.y+b.height&&a.y+a.height>b.y?!0:!1};e.prototype.intersectingRect=function(a,b){var d=Math.max(a.left,b.left),c=Math.max(a.top,b.top);return new DOMRect(d,c,Math.min(a.right,b.right)-d,Math.min(a.bottom,b.bottom)-c)};e.prototype.pedigreeCount=function(a,b){for(var d=0,c=a.parentElement;null!=c&&c!=b;)d++,c=c.parentElement;return{isAncestor:null!=c,pedigree:d}};e.prototype.selectTopmost=function(a,b){var d=a.getBoundingClientRect(),c=b.getBoundingClientRect(),
d=this.intersectingRect(d,c),c=document.elementFromPoint(d.left+d.width/2,d.top+d.height/2);if(c==a)return a;if(c==b)return b;d=this.pedigreeCount(a,c);c=this.pedigreeCount(b,c);if(d.isAncestor&&c.isAncestor){if(d.pedigree<c.pedigree)return a;if(c.pedigree<d.pedigree)return b}else{if(d.isAncestor)return a;if(c.isAncestor)return b}};e.prototype.checkOverlappingVideos=function(a){var b=this,d=a.target.getBoundingClientRect();a.overlaps.forEach(function(b){a.target.remoteVideoElement.removeClipRect(b.rect)});
a.overlaps=[];this.elements_.forEach(function(c){if(c!=a){var e=c.overlaps.map(function(a){return a.element}).indexOf(a.target);-1!=e&&(e=c.overlaps.splice(e,1)[0],c.target.remoteVideoElement.removeClipRect(e.rect));e=c.target.getBoundingClientRect();if(b.rectanglesIntersect(d,e)){var f=b.selectTopmost(a.target,c.target);f==a.target?(c.overlaps.push({element:a.target,rect:d}),c.target.remoteVideoElement.addClipRect(d)):f==c.target&&(a.overlaps.push({element:c.target,rect:e}),a.target.remoteVideoElement.addClipRect(e))}}})};
e.prototype.updateAll=function(){var a=this;this.elements_.forEach(function(b){var d=b.target.getBoundingClientRect();if(void 0!==d){var c=b.clientRect;if(void 0===c||c.x!==d.x||c.y!==d.y||c.width!==d.width||c.height!==d.height)b.clientRect=d,b.callback(d),a.checkOverlappingVideos(b)}})};e.prototype.track=function(a,b){var d=this,c=a.getBoundingClientRect();logger_1.logger.log("Track element frame",a,JSON.stringify(c));console.log(a);this.elements_.push({target:a,clientRect:void 0,callback:b,overlaps:[]});
try{logger_1.logger.log("[HdxWebRTC.js] Initializing occlusion for new videoElement"),this.clipRects.forEach(function(b){d.applyOcclusion(a,JSON.parse(b))})}catch(e){logger_1.logger.log("[HdxWebRTC.js] addOcclusionInit failed! "+e)}this.running_||(logger_1.logger.log("Start FrameTracker observer..."),this.observer_.observe(document.body,{attributes:!0,childList:!0,subtree:!0}),this.running_=!0),this.updateAll()};e.prototype.untrack=function(a){logger_1.logger.log("Untrack element frame",a);var b=
-1;this.elements_.forEach(function(d,c){d.target===a&&(b=c)});0<=b&&(this.elements_.splice(b,1),0===this.elements_.length&&(logger_1.logger.log("Stop FrameTracker observer..."),this.observer_.disconnect(),this.running_=!1))};e.prototype.applyOcclusion=function(a,b){var d=a.getBoundingClientRect();this.rectanglesIntersect(b,d)&&void 0!==a.remoteVideoElement&&a.remoteVideoElement.addClipRect(b)};e.prototype.addOcclusion=function(a){var b=this;logger_1.logger.log("[HdxWebRTC.js] Adding occlusion "+JSON.stringify(a));
logger_1.logger.log("[HdxWebRTC.js] Tracking '"+this.elements_.length+"' elements.");this.clipRects.add(JSON.stringify(a));this.elements_.forEach(function(d){b.applyOcclusion(d.target,a)})};e.prototype.removeOcclusion=function(a){var b=this;logger_1.logger.log("[HdxWebRTC.js] Removing occlusion "+JSON.stringify(a));logger_1.logger.log("[HdxWebRTC.js] Tracking '"+this.elements_.length+"' elements.");this.clipRects["delete"](JSON.stringify(a));this.elements_.forEach(function(d){var c=d.target.getBoundingClientRect();
b.rectanglesIntersect(a,c)&&void 0!==d.target.remoteVideoElement&&d.target.remoteVideoElement.removeClipRect(a)})};return e}();exports.FrameTracker=FrameTracker;
